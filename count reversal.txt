//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

int countRev (string s);
int main()
{
    int t; cin >> t;
    while (t--)
    {
        string s; cin >> s;
        cout << countRev (s) << '\n';
    
cout << "~" << "\n";
}
}

// Contributed By: Pranay Bansal
// } Driver Code Ends

int countRev(string s) {
    int len = s.length();
    // If length is odd, it's impossible to balance
    if (len % 2 != 0)
        return -1;
        
    stack<char> z;
    for (char ch : s) {
        if (ch == '}' && !z.empty() && z.top() == '{') {
            z.pop();  // Matched pair found, remove from stack
        } else {
            z.push(ch);  // Push unmatched braces to stack
        }
    }
    int red_len =z.size(); // Total unbalanced braces
    int open_count = 0;  // Count of '{' in the remaining stack
    while (!z.empty() && z.top() == '{') {
        z.pop();
        open_count++;
    }
    // Calculate the minimum reversals needed
    return (red_len / 2 + open_count % 2);
}

